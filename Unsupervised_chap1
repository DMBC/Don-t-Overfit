{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled11.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DMBC/Don-t-Overfit/blob/master/Unsupervised_chap1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pMcuniO5NEg0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "\n",
        "# Load libraries\n",
        "from sklearn import datasets\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.cluster import AgglomerativeClustering\n",
        "from sklearn.cluster import MeanShift, estimate_bandwidth\n",
        "from sklearn.datasets.samples_generator import make_blobs\n",
        "from sklearn import metrics\n",
        "from sklearn.mixture import GaussianMixture \n",
        "from sklearn.cluster import DBSCAN\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import SpectralClustering\n",
        "from sklearn import cluster, mixture\n",
        "from sklearn.cluster import AffinityPropagation\n",
        "\n",
        "\n",
        "#############\n",
        "from warnings import simplefilter\n",
        "simplefilter(action='ignore', category=FutureWarning)\n",
        "\n",
        "##data collection \n",
        "\n",
        "df = pd.read_csv(('c:\\pca\\midlset.csv'), index_col=[2])\n",
        "df = df.dropna()\n",
        "X = df.from_records\n",
        "X = df.drop(\"tier\",1).values\n",
        "d = pd.DataFrame(X) \n",
        "# The following bandwidth can be automatically detected using\n",
        "\n",
        "\n",
        "#dteremine k number of cluster\n",
        "bandwidth = estimate_bandwidth(X, quantile=0.2, n_samples=500)\n",
        "ms = MeanShift(bandwidth=bandwidth, bin_seeding=True)\n",
        "ms.fit(X)\n",
        "labels = ms.labels_\n",
        "cluster_centers = ms.cluster_centers_\n",
        "labels_unique = np.unique(labels)\n",
        "n_clusters_ = len(labels_unique)\n",
        "k = n_clusters_\n",
        "pred_labels_meanshift = ms.fit_predict(X)\n",
        "\n",
        "###AgglomerativeClustering\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_std = scaler.fit_transform(X)\n",
        "clt = AgglomerativeClustering(linkage='complete',  affinity='euclidean',     n_clusters=k)\n",
        "\n",
        "# Train model\n",
        "model = clt.fit(X_std)\n",
        "#model.labels_\n",
        "labels_true  = clt.labels_ \n",
        "pred_labels = clt.fit_predict(X)\n",
        "\n",
        "\n",
        "############Gaussian Mixture \n",
        "\n",
        "gmm = GaussianMixture(n_components = k) \n",
        "gmm.fit(d) \n",
        "alfa = gmm.fit(d) \n",
        "labels_gmm = gmm.predict(d) \n",
        "labels_gmm_pred =  gmm.fit_predict(d)\n",
        "\n",
        "########DBSCAN\n",
        "db = DBSCAN(eps=0.3, min_samples=10).fit(X)\n",
        "label_DBSCAN  = k\n",
        "\n",
        "# Number of clusters in labels, ignoring noise if present.\n",
        "n_clusters_ = k\n",
        "\n",
        "label_DBSCAN_pred = model.fit_predict(X)\n",
        "\n",
        "#################Spectral Clustering\n",
        "\n",
        "\n",
        "\n",
        "spectral = cluster.SpectralClustering(n_clusters=k, eigen_solver='arpack',affinity=\"nearest_neighbors\")\n",
        "#label_spectral = spectral.predict(X).labels_\n",
        "label_spectral_pred  = spectral.fit_predict(X)\n",
        "\n",
        "\n",
        "\n",
        "#################performance\n",
        "#################AgglomerativeClustering\n",
        "\n",
        "\n",
        "print('Performance per clustering type')\n",
        "print('AgglomerativeClustering:')\n",
        "print('Estimated number of clusters: %d' % k)\n",
        "print('Homogeneity: %0.3f' % metrics.homogeneity_score(labels_true, pred_labels))\n",
        "print(\"Completeness: %0.3f\" % metrics.completeness_score(labels_true, pred_labels))\n",
        "print(\"V-measure: %0.3f\" % metrics.v_measure_score(labels_true, pred_labels))\n",
        "print(\"Adjusted Rand Index: %0.3f\"\n",
        "      % metrics.adjusted_rand_score(labels_true, pred_labels))\n",
        "print(\"Adjusted Mutual Information: %0.3f\"\n",
        "      % metrics.adjusted_mutual_info_score(labels_true, pred_labels,\n",
        "                                           average_method='arithmetic'))\n",
        "print(\"Silhouette Coefficient: %0.3f\"\n",
        "      % metrics.silhouette_score(X, labels_true, metric='sqeuclidean'))\n",
        "\n",
        "\n",
        "aggclustm1 = metrics.homogeneity_score(labels_true, pred_labels)\n",
        "aggclustm2 = metrics.completeness_score(labels_true, pred_labels)\n",
        "aggclustm3 = metrics.v_measure_score(labels_true, pred_labels)\n",
        "aggclustm4 = metrics.adjusted_rand_score(labels_true, pred_labels)\n",
        "aggclustm5 = metrics.adjusted_mutual_info_score(labels_true, pred_labels,average_method='arithmetic')\n",
        "aggclustm6 = metrics.silhouette_score(X, labels_true, metric='sqeuclidean')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#################MeanShift\n",
        "print('MeanShift:')\n",
        "print('Homogeneity: %0.3f' % metrics.homogeneity_score(labels, pred_labels_meanshift))\n",
        "print(\"Completeness: %0.3f\" % metrics.completeness_score(labels, pred_labels_meanshift))\n",
        "print(\"V-measure: %0.3f\" % metrics.v_measure_score(labels, pred_labels_meanshift))\n",
        "print(\"Adjusted Rand Index: %0.3f\"\n",
        "      % metrics.adjusted_rand_score(labels, pred_labels_meanshift))\n",
        "print(\"Adjusted Mutual Information: %0.3f\"\n",
        "      % metrics.adjusted_mutual_info_score(labels, pred_labels_meanshift,\n",
        "                                           average_method='arithmetic'))\n",
        "print(\"Silhouette Coefficient: %0.3f\"\n",
        "      % metrics.silhouette_score(X, labels, metric='sqeuclidean'))\n",
        "\n",
        "meanshift1 = metrics.homogeneity_score(labels, pred_labels_meanshift)\n",
        "meanshift2 = metrics.completeness_score(labels, pred_labels_meanshift)\n",
        "meanshift3 = metrics.v_measure_score(labels, pred_labels_meanshift)\n",
        "meanshift4 = metrics.adjusted_rand_score(labels, pred_labels_meanshift)\n",
        "meanshift5 = metrics.adjusted_mutual_info_score(labels, pred_labels_meanshift,average_method='arithmetic')\n",
        "meanshift6 = metrics.silhouette_score(X, labels, metric='sqeuclidean')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#################Gaussian Mixture\n",
        "print('Gaussian Mixture:')\n",
        "print('Estimated number of clusters: %d' % k)\n",
        "print('Homogeneity: %0.3f' % metrics.homogeneity_score(labels_gmm , labels_gmm_pred))\n",
        "print(\"Completeness: %0.3f\" % metrics.completeness_score(labels_gmm , labels_gmm_pred))\n",
        "print(\"V-measure: %0.3f\" % metrics.v_measure_score(labels_gmm , labels_gmm_pred))\n",
        "print(\"Adjusted Rand Index: %0.3f\"\n",
        "      % metrics.adjusted_rand_score(labels_gmm , labels_gmm_pred))\n",
        "print(\"Adjusted Mutual Information: %0.3f\"\n",
        "      % metrics.adjusted_mutual_info_score(labels_gmm , labels_gmm_pred,\n",
        "                                           average_method='arithmetic'))\n",
        "print(\"Silhouette Coefficient: %0.3f\"\n",
        "      % metrics.silhouette_score(X, labels_gmm, metric='sqeuclidean'))\n",
        "\n",
        "gmm1 = metrics.homogeneity_score(labels_gmm , labels_gmm_pred)\n",
        "gmm2 = metrics.completeness_score(labels_gmm , labels_gmm_pred)\n",
        "gmm3 = metrics.v_measure_score(labels_gmm , labels_gmm_pred)\n",
        "gmm4 = metrics.adjusted_rand_score(labels_gmm , labels_gmm_pred)\n",
        "gmm5 = metrics.adjusted_mutual_info_score(labels_gmm , labels_gmm_pred, average_method='arithmetic')\n",
        "gmm6 =  metrics.silhouette_score(X, labels_gmm, metric='sqeuclidean')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#################DBSCAN\n",
        "\n",
        "print('DBSCAN:')\n",
        "print('Estimated number of clusters: %d' % k)\n",
        "print(\"Homogeneity: %0.3f\" % metrics.homogeneity_score(labels, label_DBSCAN_pred))\n",
        "print(\"Completeness: %0.3f\" % metrics.completeness_score(labels, label_DBSCAN_pred))\n",
        "print(\"V-measure: %0.3f\" % metrics.v_measure_score(labels, label_DBSCAN_pred))\n",
        "print(\"Adjusted Rand Index: %0.3f\"\n",
        "      % metrics.adjusted_rand_score(labels, label_DBSCAN_pred))\n",
        "print(\"Adjusted Mutual Information: %0.3f\"\n",
        "      % metrics.adjusted_mutual_info_score(labels, label_DBSCAN_pred,\n",
        "                                           average_method='arithmetic'))\n",
        "print(\"Silhouette Coefficient: %0.3f\"\n",
        "      % metrics.silhouette_score(X, labels, metric='sqeuclidean'))\n",
        "\n",
        "dbscan1 = metrics.homogeneity_score(labels, label_DBSCAN_pred)\n",
        "dbscan2 = metrics.completeness_score(labels, label_DBSCAN_pred)\n",
        "dbscan3 = metrics.v_measure_score(labels, label_DBSCAN_pred)\n",
        "dbscan4 = metrics.adjusted_rand_score(labels, label_DBSCAN_pred)\n",
        "dbscan5 = metrics.adjusted_mutual_info_score(labels, label_DBSCAN_pred,\n",
        "                                           average_method='arithmetic')\n",
        "dbscan6 = metrics.silhouette_score(X, labels, metric='sqeuclidean')\n",
        "\n",
        "\n",
        "\n",
        "#################Spectral Clustering\n",
        "\n",
        "print('Spectral Clustering:')\n",
        "print('Estimated number of clusters: %d' % k)\n",
        "print(\"Homogeneity: %0.3f\" % metrics.homogeneity_score(labels, label_spectral_pred ))\n",
        "print(\"Completeness: %0.3f\" % metrics.completeness_score(labels, label_spectral_pred))\n",
        "print(\"V-measure: %0.3f\" % metrics.v_measure_score(labels, label_spectral_pred))\n",
        "print(\"Adjusted Rand Index: %0.3f\"\n",
        "      % metrics.adjusted_rand_score(labels, label_spectral_pred))\n",
        "print(\"Adjusted Mutual Information: %0.3f\"\n",
        "      % metrics.adjusted_mutual_info_score(labels, label_spectral_pred,\n",
        "                                           average_method='arithmetic'))\n",
        "print(\"Silhouette Coefficient: %0.3f\"\n",
        "      % metrics.silhouette_score(X, labels, metric='sqeuclidean'))\n",
        "\n",
        "spectralclust1 = metrics.homogeneity_score(labels, label_spectral_pred)\n",
        "spectralclust2 = metrics.completeness_score(labels, label_spectral_pred)\n",
        "spectralclust3 = metrics.v_measure_score(labels, label_spectral_pred)\n",
        "spectralclust4 = metrics.adjusted_rand_score(labels, label_spectral_pred)\n",
        "spectralclust5 = metrics.adjusted_mutual_info_score(labels, label_spectral_pred,average_method='arithmetic')\n",
        "spectralclust6 = metrics.silhouette_score(X, labels, metric='sqeuclidean')\n",
        "\n",
        "########################Afinity  propagation\n",
        "\n",
        "af = AffinityPropagation(preference=-50).fit(X)\n",
        "cluster_centers_indices = af.cluster_centers_indices_\n",
        "labels_aff = af.labels_\n",
        "labels_ = af.labels_\n",
        "n_clusters_ = k\n",
        "label_aff_prop = af.fit_predict(X)\n",
        "#print(label_aff_prop)\n",
        "\n",
        "print('Affinity  propagation:')\n",
        "print('Estimated number of clusters: %d' % n_clusters_)\n",
        "print(\"Homogeneity: %0.3f\" % metrics.homogeneity_score(labels_aff, label_aff_prop))\n",
        "print(\"Completeness: %0.3f\" % metrics.completeness_score(labels_aff, label_aff_prop))\n",
        "print(\"V-measure: %0.3f\" % metrics.v_measure_score(labels_aff, label_aff_prop))\n",
        "print(\"Adjusted Rand Index: %0.3f\"\n",
        "      % metrics.adjusted_rand_score(labels_aff, label_aff_prop))\n",
        "print(\"Adjusted Mutual Information: %0.3f\"\n",
        "      % metrics.adjusted_mutual_info_score(labels_aff, label_aff_prop,\n",
        "                                           average_method='arithmetic'))\n",
        "print(\"Silhouette Coefficient: %0.3f\"\n",
        "      % metrics.silhouette_score(X, labels_aff, metric='sqeuclidean'))\n",
        "affprop1 = metrics.homogeneity_score(labels_aff, label_aff_prop)\n",
        "affprop2 = metrics.completeness_score(labels_aff, label_aff_prop)\n",
        "affprop3 = metrics.v_measure_score(labels_aff, label_aff_prop)\n",
        "affprop4 = metrics.adjusted_rand_score(labels_aff, label_aff_prop)\n",
        "affprop5 = metrics.adjusted_mutual_info_score(labels_aff, label_aff_prop,average_method='arithmetic')\n",
        "affprop6 = metrics.silhouette_score(X, labels_aff, metric='sqeuclidean')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "###################RAW DATA EXPORT\n",
        "\n",
        "\n",
        "o = 1\n",
        "\n",
        "raw_data = {'Type of algorythm'  : ['AgglomerativeClustering','Affinity  propagation','MeanShift','Gaussian Mixture','DBSCAN','Spectral Clustering'],\n",
        "            'Estimated number of clusters':[ k,k,k,k,k,k],\n",
        "            'Homogeneity': [aggclustm1, affprop1, meanshift1, gmm1, dbscan1,spectralclust1], \n",
        "            'Completeness': [aggclustm2, affprop2, meanshift2, gmm2, dbscan2,spectralclust2], \n",
        "            'V-measure': [aggclustm3, affprop3, meanshift3, gmm3, dbscan3,spectralclust3],\n",
        "            'Adjusted Rand Index' : [aggclustm4, affprop4, meanshift4, gmm4, dbscan4,spectralclust4],\n",
        "            'Adjusted Mutual Information': [aggclustm5, affprop5, meanshift5,gmm5, dbscan5,spectralclust5],\n",
        "            'Silhouette Coefficient' : [aggclustm6, affprop6, meanshift6, gmm6, dbscan6,spectralclust6]\n",
        "        }\n",
        "daf = pd.DataFrame(raw_data, columns = ['Type of algorythm' ,'Estimated number of clusters', \n",
        "   'Homogeneity', 'Completeness', 'V-measure', 'Adjusted Rand Index' ,'Adjusted Mutual Information', 'Silhouette Coefficient' ])\n",
        "\n",
        "import datetime\n",
        "import time\n",
        "import re\n",
        "tsnow = datetime.datetime.now()\n",
        "\n",
        "TodaysTime = tsnow.strftime('%H-%M-%S')\n",
        "TodaysDate = tsnow.strftime('%Y-%b-%d')\n",
        "\n",
        "#'[\\s+]', '', s\n",
        "#TodaysDate = re.sub('[tsnow]','',tsnow)\n",
        "#datetime.datetime.now().strftime(\"%Y-%m-%d\")\n",
        "csv_file_name  = 'result' + '_' + TodaysDate + '_' + TodaysTime + \".csv\"\n",
        "\n",
        "\n",
        "daf.to_csv('/pca/' + csv_file_name )\n",
        " \n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}